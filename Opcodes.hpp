#define IMM_LDA 0xA9 // Загрузка значения в аккумулятор, стоящего сразу после опкода
#define ZP_LDA 0xA5 // Извелкаем значение из 8 разрядного адреса
#define ZPX_LDA 0xB5 // Складываем значение из X к 8 разрядному адресу и извелкаем из него значение
#define ABS_LDA 0xAD // Извлекаем 16 разрядный адрес и значение по нему помещаем в A
#define ABSX_LDA 0xBD // Извлекаем 16 разрядный адрес + X и значение по нему помещаем в A
#define ABSY_LDA 0xB9 // Извлекаем 16 разрядный адрес + Y и значение по нему помещаем в A
#define INDX_LDA 0xA1 // Извлекаем 16 разрядный адрес из 8 битного адреса + X и следущего после него значения
#define INDY_LDA 0xB1 // Извлекаем 16 разрядный адрес + Y и значение по нему помещаем в A

#define IMP_INX 0xE8 // Инкремент X
#define IMP_INY 0xC8 // Инкремент Y

#define IMP_DEX 0xCA // Декремент X
#define IMP_DEY 0x88 // Декремент Y

#define ZP_INC 0xE6 // Инкремент операнда по адресу
#define ZPX_INC 0xF6 // Инкремент операнда по адресу + X
#define ABS_INC 0xEE // Инкремент операнда по адресу 16 разрядному
#define ABSX_INC 0xFE // Инкремент операнда по адресу 16 разрядному

#define IMM_ADC 0x69 // Сложение аккумулятора и операнда, результат в аккумуляторе 
#define ZP_ADC 0x65 // Сложение аккумулятора и операнда из 8 разрядного адреса, результат в аккумуляторе
#define ZPX_ADC 0x75 // Сложение аккумулятора и операнда из 8 разрядного адреса + X, результат в аккумуляторе
#define ABS_ADC 0x6D // Сложение аккумулятора и операнда из 16 разрядного адреса, результат в аккумуляторе
#define ABSX_ADC 0x7D // Сложение аккумулятора и операнда из 16 разрядного адреса + X, результат в аккумуляторе
#define ABSY_ADC 0x79 // Сложение аккумулятора и операнда из 16 разрядного адреса + Y, результат в аккумуляторе
#define INDX_ADC 0x61 // Извлекаем 16 разрядный адрес из 8 битного адреса + X и следущего после него значения, далее действия так же как и выше
#define INDY_ADC 0x71 // Извлекаем 16 разрядный адрес из 8 битного адреса + Y и следущего после него значения, далее действия так же как и выше

#define IMM_LDX 0xA2 // Загрузка значения в X
#define ZP_LDX 0xA6 // Загрузка значения в X
#define ZPY_LDX 0xB6 // Загрузка значения в X
#define ABS_LDX 0xAE // Загрузка значения в X
#define ABSY_LDX 0xBE // Загрузка значения в X

#define IMM_LDY 0xA0 // Загрузка значения в Y
#define ZP_LDY 0xA4 // Загрузка значения в Y
#define ZPX_LDY 0xB4 // Загрузка значения в Y
#define ABS_LDY 0xAC // Загрузка значения в Y
#define ABSX_LDY 0xBC // Загрузка значения в Y

#define IMM_AND 0x29 // Логическое И с операндом и ACC
#define ZP_AND 0x25  // Логическое И с операндом и ACC
#define ZPX_AND 0x35 // Логическое И с операндом и ACC
#define ABS_AND 0x2D // Логическое И с операндом и ACC
#define ABSX_AND 0x3D // Логическое И с операндом и ACC
#define ABSY_AND 0x39 // Логическое И с операндом и ACC
#define INDX_AND 0x21 // Логическое И с операндом и ACC
#define INDY_AND 0x31 // Логическое И с операндом и ACC

#define IMP_TAX 0xAA // Передать A в X

#define IMP_TAY 0xA8 // Передать A в Y

#define IMP_TSX 0xBA // Передать S в X

#define IMP_TXA 0x8A // Передать X в A

#define IMP_TXS 0x9A // Передать X в S

#define IMP_TYA 0x98 // Передать Y в A

#define IMP_SEC 0x38 // Установка флага переноса

#define IMP_SED 0xF8 // Установка флага BCD

#define IMP_SEI 0x78 // Установка флага запрета прерываний 

#define REL_BCC 0x90 // Условный переход, если нет переноса

#define REL_BCS 0xB0 // Условный переход, если перенос

#define REL_BEQ 0xF0 // Условный переход, если равно (Z=1)

#define REL_BNE 0xD0 // Условный переход, если не равно (Z=0)

#define IMP_NOP 0xEA // Ничего

#define ABS_JSR 0x20 // Вызов подпрограммы

#define IMP_RTS 0x60 // Возврат из подпрограммы

#define IMP_BRK 0x00 // Программное прерывание

#define IMP_RTI 0x40 // Возврат из прерывания

#define ABS_JMP 0x4C // Переход к указанному адресу
#define IND_JMP 0x6C // Переход к указанному адресу